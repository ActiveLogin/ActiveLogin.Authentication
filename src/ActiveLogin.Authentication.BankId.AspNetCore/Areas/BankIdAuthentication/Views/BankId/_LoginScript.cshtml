@using ActiveLogin.Authentication.BankId.AspNetCore.Areas.BankIdAuthentication.Models
@using ActiveLogin.Authentication.Common.Serialization
@model ActiveLogin.Authentication.BankId.AspNetCore.Areas.BankIdAuthentication.Models.BankIdLoginViewModel
@inject IJsonSerializer JsonSerializer

<script>
    (function (options) {
        // Elements

        var statusElement = document.querySelector('#bankIdLoginStatus');
        var statusSpinnerElement = statusElement.querySelector('.status-spinner');
        var statusMessageElement = statusElement.querySelector('.status-message');

        var formElement = document.querySelector('#bankIdLoginForm');
        var formSubmitButtonElement = formElement.querySelector('button[type="submit"]');
        var formSubmitButtonTextElement = formSubmitButtonElement.querySelector('.submit-text');
        var formSubmitButtonSpinnerElement = formSubmitButtonElement.querySelector('.status-spinner');
        var formFieldsetElement = formElement.querySelector('fieldset');

        // Events

        formElement.addEventListener('submit', function (event) {
            event.preventDefault();

            var requestVerificationTokenElement = this.querySelector('[name="RequestVerificationToken"]');
            var returnUrlElement = this.querySelector('[name="ReturnUrl"]');
            var loginOptionsElement = this.querySelector('[name="LoginOptions"]');
            var personalIdentityNumberElement = this.querySelector('[name="PersonalIdentityNumber"]');

            initialize(requestVerificationTokenElement.value, returnUrlElement.value, loginOptionsElement.value, personalIdentityNumberElement.value, personalIdentityNumberElement);
        });

        // BankID

        function initialize(requestVerificationToken, returnUrl, loginOptions, personalIdentityNumber, personalIdentityNumberElement) {
            formFieldsetElement.disabled = true;
            show(formSubmitButtonSpinnerElement);
            hide(formSubmitButtonTextElement);
            postJson(options.bankIdInitializeApiUrl, requestVerificationToken, {
                'personalIdentityNumber': personalIdentityNumber,
                'loginOptions': loginOptions
            })
                .then(function (data) {
                    if (!!data.PersonalIdentityNumber) {
                        setInvalidUntilChange(personalIdentityNumberElement);
                        formFieldsetElement.disabled = false;
                    } else {
                        hide(formElement);
                        showStatus(options.initialStatusMessage, 'info', true);
                        checkStatus(requestVerificationToken, returnUrl, loginOptions, data.orderRef);
                    }
                    show(formSubmitButtonTextElement);
                    hide(formSubmitButtonSpinnerElement);
                }).catch(function (error) {
                    showStatus(error.message, 'danger');
                    show(formSubmitButtonTextElement);
                    hide(formSubmitButtonSpinnerElement);
                    formFieldsetElement.disabled = false;
                });
        }

        function checkStatus(requestVerificationToken, returnUrl, loginOptions, orderRef) {
            postJson(options.bankIdStatusApiUrl, requestVerificationToken,
                {
                    'orderRef': orderRef,
                    'returnUrl': returnUrl,
                    'loginOptions': loginOptions
                })
                .then(function (data) {
                    if (data.isFinished) {
                        document.location = data.redirectUri;
                    } else {
                        showStatus(data.statusMessage, 'info', true);
                        setTimeout(function () {
                            checkStatus(requestVerificationToken, returnUrl, loginOptions, orderRef);
                        }, options.refreshIntervalMs);
                    }
                }).catch(function (error) {
                    showStatus(error.message, 'danger', false);
                });
        }

        // Helpers

        function postJson(url, requestVerificationToken, data) {
            return fetch(url,
                {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': requestVerificationToken
                    },
                    credentials: 'include',
                    body: JSON.stringify(data)
                })
                .then(function (response) {
                    var contentType = response.headers.get("content-type");
                    if (contentType && contentType.indexOf("application/json") !== -1) {
                        return response.json();
                    }

                    throw Error(options.unknownErrorMessage);
                })
                .then(function (data) {
                    if (!!data.errorMessage) {
                        throw Error(data.errorMessage);
                    }
                    return data;
                });
        }

        function showStatus(status, type, spinner) {
            if (type === 'info') {
                type = 'primary';
            }

            statusElement.className = 'alert alert-' + type;
            statusMessageElement.innerText = status;
            setVisibility(statusSpinnerElement, spinner, 'inline-block');
            show(statusElement);
        }

        function setVisibility(element, visible, display) {
            if (!!visible) {
                show(element, display);
            } else {
                hide(element, display);
            }
        }

        function show(element, display) {
            element.style.display = display || 'block';
        }

        function hide(element) {
            element.style.display = 'none';
        }

        function setInvalidUntilChange(element) {
            if (!element.classList) {
                return;
            }

            element.classList.add('is-invalid');
            element.addEventListener('input', removeInvalid);
            
            function removeInvalid() {
                element.removeEventListener('input', removeInvalid);
                element.classList.remove('is-invalid');
            }
        }
    }(@Html.Raw(JsonSerializer.Serialize(Model.LoginScriptOptions))));
</script>