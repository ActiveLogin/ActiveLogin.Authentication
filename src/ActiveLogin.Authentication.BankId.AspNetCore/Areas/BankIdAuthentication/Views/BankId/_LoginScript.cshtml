@model ActiveLogin.Authentication.BankId.AspNetCore.Areas.BankIdAuthentication.Models.BankIdLoginViewModel

<script>
    (function (options) {
        // Pre check
        var statusElement = document.querySelector('#bankIdLoginStatus');
        var statusWrapperElement = statusElement.querySelector('.status-wrapper');
        var statusSpinnerElement = statusElement.querySelector('.status-spinner');
        var statusMessageElement = statusElement.querySelector('.status-message');
        var cancelButtonElement = statusElement.querySelector('.btn-cancel');

        var requiredFeatures = [window.fetch, window.sessionStorage];
        var isMissingSomeFeature = requiredFeatures.some(function(x) { return !x; });
        if (isMissingSomeFeature) {
            showStatus(options.unsupportedBrowserErrorMessage, 'danger', false, true);
            return;
        }

        // OrderRef

        var sessionStorageOrderRefKey = 'ActiveLogin_BankId_OrderRef';
        var orderRef = sessionStorage.getItem(sessionStorageOrderRefKey);
        sessionStorage.removeItem(sessionStorageOrderRefKey);

        // Elements

        var startBankIdAppButtonElement = document.querySelector('#bankIdLoginStartApp');
        var qrCodeElement = statusElement.querySelector('.qr-code-image');

        var formElement = document.querySelector('#bankIdLoginForm');
        var formFieldsetElement = formElement.querySelector('fieldset');
        var autoLoginElement = formElement.querySelector('[name="AutoLogin"]');
        var autoLogin = autoLoginElement.value === 'true';

        var formSubmitButtonElement = formElement.querySelector('button[type="submit"]');
        var formSubmitButtonTextElement = null;
        var formSubmitButtonSpinnerElement = null;
        if (formSubmitButtonElement) {
            formSubmitButtonTextElement = formSubmitButtonElement.querySelector('.submit-text');
            formSubmitButtonSpinnerElement = formSubmitButtonElement.querySelector('.status-spinner');
        }

        // Events

        if (orderRef) {
            showOrderRefStatus(orderRef);
        } else if (autoLogin) {
            document.addEventListener('DOMContentLoaded', function () {
                resetUi();
                login();
            });
        } else {
            formElement.addEventListener('submit', function (event) {
                event.preventDefault();

                resetUi();
                login();
            });
        }

        // Boot

        function showOrderRefStatus(orderRef) {
            var requestVerificationTokenElement = formElement.querySelector('[name="RequestVerificationToken"]');
            var returnUrlElement = formElement.querySelector('[name="ReturnUrl"]');
            var loginOptionsElement = formElement.querySelector('[name="LoginOptions"]');

            hide(formElement);
            showStatus(options.initialStatusMessage, 'white', true);

            checkStatus(requestVerificationTokenElement.value, returnUrlElement.value, loginOptionsElement.value, orderRef);
        }

        function login() {
            var requestVerificationTokenElement = formElement.querySelector('[name="RequestVerificationToken"]');
            var returnUrlElement = formElement.querySelector('[name="ReturnUrl"]');
            var cancelReturnUrlElement = formElement.querySelector('[name="CancelReturnUrl"]');
            var loginOptionsElement = formElement.querySelector('[name="LoginOptions"]');
            var personalIdentityNumberElement = formElement.querySelector('[name="PersonalIdentityNumber"]');
            var personalIdentityNumber = !!personalIdentityNumberElement ? personalIdentityNumberElement.value : '';

            initialize(requestVerificationTokenElement.value, returnUrlElement.value, cancelReturnUrlElement.value, loginOptionsElement.value, personalIdentityNumber, personalIdentityNumberElement);
        }

        function resetUi() {
            formFieldsetElement.disabled = true;
            show(formSubmitButtonSpinnerElement);
            hide(formSubmitButtonTextElement);
            hide(qrCodeElement);
        }

        // BankID

        var autoStartAttempts = 0;
        var loginIsCancelledByUser = false;
        function initialize(requestVerificationToken, returnUrl, cancelUrl, loginOptions, personalIdentityNumber, personalIdentityNumberElement) {
            loginIsCancelledByUser = false;

            function enableCancelButton(orderRef) {
                var onCancelButtonClick = function(event) {
                    cancel(requestVerificationToken, cancelUrl, orderRef, loginOptions);
                    event.target.removeEventListener('click', onCancelButtonClick);
                };
                cancelButtonElement.addEventListener('click', onCancelButtonClick);
            }

            postJson(options.bankIdInitializeApiUrl, requestVerificationToken, {
                'personalIdentityNumber': personalIdentityNumber,
                'returnUrl': returnUrl,
                'loginOptions': loginOptions
            })
                .then(function (data) {
                    if (data.isAutoLaunch) {
                        if (!data.checkStatus) {
                            sessionStorage.setItem(sessionStorageOrderRefKey, data.orderRef);
                        }

                        if (data.deviceMightRequireUserInteractionToLaunchBankIdApp) {
                            var startBankIdAppButtonOnClick = function(event) {
                                window.location.href = data.redirectUri;
                                hide(startBankIdAppButtonElement);
                                event.target.removeEventListener('click', startBankIdAppButtonOnClick);
                            };
                            startBankIdAppButtonElement.addEventListener('click', startBankIdAppButtonOnClick);

                            show(startBankIdAppButtonElement);
                        } else {
                            window.location.href = data.redirectUri;
                        }
                    }

                    if (!!data.qrStartState && !!data.qrCodeAsBase64) {
                        setQrCode(data.qrCodeAsBase64);
                        refreshQrCode(requestVerificationToken, data.qrStartState);
                    }

                    if (!!data.personalIdentityNumber) {
                        setInvalidUntilChange(personalIdentityNumberElement);
                        formFieldsetElement.disabled = false;
                    } else {
                        enableCancelButton(data.orderRef);

                        hide(formElement);
                        showStatus(options.initialStatusMessage, 'white', true);

                        if (data.checkStatus) {
                            checkStatus(requestVerificationToken, returnUrl, loginOptions, data.orderRef);
                        }
                    }

                    show(formSubmitButtonTextElement);
                    hide(formSubmitButtonSpinnerElement);
                }).catch(function (error) {
                    showStatus(error.message, 'danger', false);
                    hide(qrCodeElement);
                    hide(startBankIdAppButtonElement);
                    show(formSubmitButtonTextElement);
                    hide(formSubmitButtonSpinnerElement);
                    formFieldsetElement.disabled = false;
                    enableCancelButton();
                });
        }

        function checkStatus(requestVerificationToken, returnUrl, loginOptions, orderRef) {
            if (loginIsCancelledByUser) {
                return;
            }

            postJson(options.bankIdStatusApiUrl, requestVerificationToken, {
                    'orderRef': orderRef,
                    'returnUrl': returnUrl,
                    'loginOptions': loginOptions,
                    'autoStartAttempts': autoStartAttempts
                })
                .then(function (data) {
                    if (data.retryLogin) {
                        autoStartAttempts++;
                        login();
                    } else if (data.isFinished) {
                        window.location.href = data.redirectUri;
                    } else if (!loginIsCancelledByUser) {
                        autoStartAttempts = 0;
                        showStatus(data.statusMessage, 'white', true);
                        setTimeout(function () {
                            checkStatus(requestVerificationToken, returnUrl, loginOptions, orderRef);
                        }, options.statusRefreshIntervalMs);
                    }
                }).catch(function (error) {
                    if (!loginIsCancelledByUser) {
                        showStatus(error.message, 'danger', false);
                        hide(startBankIdAppButtonElement);
                    }
                    hide(qrCodeElement);
                });
        }

        function refreshQrCode(requestVerificationToken, qrStartState) {
            if (loginIsCancelledByUser) {
                return;
            }

            postJson(options.bankIdQrCodeApiUrl, requestVerificationToken, {
                    'qrStartState': qrStartState
                })
                .then(function (data) {
                    if (!!data.qrCodeAsBase64) {
                        setQrCode(data.qrCodeAsBase64);

                        setTimeout(function () {
                            refreshQrCode(requestVerificationToken, qrStartState);
                        }, options.qrCodeRefreshIntervalMs);
                    }
                }).catch(function (error) {
                    if (!loginIsCancelledByUser) {
                        showStatus(error.message, 'danger', false);
                        hide(startBankIdAppButtonElement);
                    }
                    hide(qrCodeElement);
                });
        }

        function setQrCode(qrCodeAsBase64) {
            qrCodeElement.src = 'data:image/png;base64, ' + qrCodeAsBase64;
            show(qrCodeElement);
        }

        function cancel(requestVerificationToken, cancelReturnUrl, orderRef, loginOptions) {
            loginIsCancelledByUser = true;

            if (!orderRef) {
                window.location.href = cancelReturnUrl;
                return;
            }

            postJson(options.bankIdCancelApiUrl,
                requestVerificationToken,
                {
                    'orderRef': orderRef,
                    'loginOptions': loginOptions
                }).finally(function() {
                    window.location.href = cancelReturnUrl;
                });
        }

        // Helpers

        function postJson(url, requestVerificationToken, data) {
            return fetch(url,
                {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': requestVerificationToken
                    },
                    credentials: 'include',
                    body: JSON.stringify(data)
                })
                .then(function (response) {
                    var contentType = response.headers.get("content-type");
                    if (contentType && contentType.indexOf("application/json") !== -1) {
                        return response.json();
                    }

                    throw Error(options.unknownErrorMessage);
                })
                .then(function (data) {
                    if (!!data.errorMessage) {
                        throw Error(data.errorMessage);
                    }
                    return data;
                });
        }

        function showStatus(status, type, spinner, html) {
            var textClass = 'text-white';
            if (type === 'white') {
                textClass = '';
            }

            statusWrapperElement.className = 'card status-wrapper bg-' + type + ' ' + textClass;
            if (!!html) {
                statusMessageElement.innerHTML = status;
            } else {
                statusMessageElement.innerText = status;
            }
            setVisibility(statusSpinnerElement, spinner, 'inline-block');
            show(statusElement);
        }

        function setVisibility(element, visible, display) {
            if (!!visible) {
                show(element, display);
            } else {
                hide(element, display);
            }
        }

        function show(element, display) {
            if (!element) {
                return;
            }

            element.style.display = display || 'block';
        }

        function hide(element) {
            if (!element) {
                return;
            }

            element.style.display = 'none';
        }

        function setInvalidUntilChange(element) {
            if (!element || !element.classList) {
                return;
            }

            element.classList.add('is-invalid');
            element.addEventListener('input', removeInvalid);

            function removeInvalid() {
                element.removeEventListener('input', removeInvalid);
                element.classList.remove('is-invalid');
            }
        }
    }(@Html.Raw(Model.LoginScriptOptionsJson)));
</script>
