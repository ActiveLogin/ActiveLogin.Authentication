name: Active Login Authentication

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  dotnetBuildConfiguration: 'Release'
  dotnetVerbosity: 'Detailed'

jobs:
  package_nuget:
    name: Build and pack NuGet packages
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            include:
            - os: windows-latest
              artifactName: nuget-windows
            - os: macos-latest
              artifactName: nuget-macos
            - os: ubuntu-latest
              artifactName: nuget-ubuntu
    env:
       sourceRepositoryBranch: $github_ref_name
       sourceRepositoryCommit: $github_sha

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
      
      - name: Dotnet restore
        run: dotnet restore --verbosity ${{ env.dotnetVerbosity }}     
      
      - name: Dotnet build
        run: dotnet build --configuration ${{ env.dotnetBuildConfiguration }} --verbosity ${{ env.dotnetVerbosity }}

      - name: 'Dotnet pack: ci'
        run: dotnet pack --output $runner_temp"/ci" --configuration ${{ env.dotnetBuildConfiguration }} --verbosity ${{ env.dotnetVerbosity }} /p:Configuration=${{ env.dotnetBuildConfiguration }} /p:RepositoryBranch=${{ env.sourceRepositoryBranch }} /p:RepositoryCommit=${{ env.sourceRepositoryCommit }} /p:VersionSuffix=ci-$github_run_id
     
      - name: 'Dotnet pack: release'
        run: dotnet pack --output $runner_temp"/release" --configuration ${{ env.dotnetBuildConfiguration }} --verbosity ${{ env.dotnetVerbosity }} /p:Configuration=${{ env.dotnetBuildConfiguration }} /p:RepositoryBranch=${{ env.sourceRepositoryBranch }} /p:RepositoryCommit=${{ env.sourceRepositoryCommit }}

      - name: Dotnet test
        run: dotnet test --configuration ${{ env.dotnetBuildConfiguration }} --collect "Code coverage"

      - name: Upload packages
        uses: actions/upload-artifact@v2
        with: 
            name: ${{ matrix.artifactName }}
            path: $runner_temp

  sign_nuget:
    name: Sign NuGet packages on Windows
    runs-on: windows-latest
    needs: package_nuget
    if: github.event_name != 'pull_request'

    env:
      sourceArtifactName: 'nuget-windows'
      targetArtifactName: 'nuget-windows-signed'
      pathToNugetPackages: '**/*.nupkg'
      
    steps:
      - name: Download artifact 
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.sourceArtifactName }}

      - name: Install NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: '5.x'

      - name: Create file codesigning-cert.pfx
        run: |
          $certFile = Join-Path -Path $RUNNER_TEMP -ChildPath "codesigning-cert.pfx";
          $encodedBytes = [System.Convert]::FromBase64String($env:cert_fileb64);
          Set-Content $$certFile -Value $encodedBytes -AsByteStream;
        shell: pwsh
        env:
          cert_fileb64: ""
      #    cert_fileb64: ${{ secrets.CODESIGNING_CERT_FILEB64 }}

      - name: NuGet sign
        run: dotnet nuget sign $GITHUB_WORKSPACE"/"${{ env.pathToNugetPackages }} -CertificatePath $RUNNER_TEMP"/codesigning-cert.pfx" -CertificatePassword ${{ env.codesigning_cert_password }} -Timestamper ${{ env.codesigning_timestamperUrl }}
        env:
          codesigning_cert_password: ${{ secrets.CODESIGNING_CERT_PASSWORD }}
          codesigning_timestamper_url: ${{ secrets.CODESIGNING_TIMESTAMPERURL }}

      - name: Upload signed packages
        uses: actions/upload-artifact@v2
        with: 
          name: ${{ env.targetArtifactName }}
          path: $GITHUB_WORKSPACE"/"${{ env.sourceArtifactName }}

  build_samples:
    name: Build samples
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: windows-latest
          artifactName: samples-windows
        - os: macos-latest
          artifactName: samples-macos
        - os: ubuntu-latest
          artifactName: samples-ubuntu

    steps:
      - uses: actions/checkout@v2

      - name: Create file BankIdRootCertificate-Prod.crt
        run: |
          $certFile = Join-Path -Path samples/IdentityServer.ServerSample/Certificates -ChildPath "BankIdRootCertificate-Prod.crt";
          $encodedBytes = [System.Convert]::FromBase64String($env:bankIdRootCert_prod);
          Set-Content $$certFile -Value $encodedBytes -AsByteStream;
        shell: pwsh
        env:
          bankIdRootCert_prod: ${{ secrets.BANKIDROOTCERTIFICATE_PROD_FILEB64 }}

      - name: Create file BankIdRootCertificate-Test.crt
        run: |
          $certFile = Join-Path -Path samples/IdentityServer.ServerSample/Certificates -ChildPath "BankIdRootCertificate-Test.crt";
          $encodedBytes = [System.Convert]::FromBase64String($env:bankIdRootCert_test);
          Set-Content $$certFile -Value $encodedBytes -AsByteStream;
        shell: pwsh
        env:
          bankIdRootCert_test: ${{ secrets.BANKIDROOTCERTIFICATE_TEST_FILEB64 }}

      - name: 'Install: .NET Core SDK'
        uses: actions/setup-dotnet@v1.7.2

      # TODO add publish and zip
      - name: Dotnet publish
        run : dotnet publish --configuration ${{ env.dotnetBuildConfiguration }} --output ${{ env.outputFolder }} --self-contained --runtime win-x86
        env:
          outputFolder: $RUNNER_TEMP

      - name: Upload samples
        uses: actions/upload-artifact@v2
        with: 
          name: ${{ matrix.artifactName }}
          path: $RUNNER_TEMP
